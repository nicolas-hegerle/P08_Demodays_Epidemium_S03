import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt



def plot_summary_graphs(df_all, df_train, df_val, cell_type = None, width = 30, height = 15):
    '''
    Plots the summary statistics of the dataframes generated by the <generate_predictions> function and returns a figure object

    Arguments:
    df_all: the initial dataframe used to train the model containing all the information on the cell types and patients
    df_train: the dataframe generated by <generate_predictions> on the iterations of the train image generator
    df_val: the dataframe generated by <generate_predictions> on the iterations of the val image generator
    cell_type: if provided should be one of the cell_types under the <raw_img_dir> of the initial dataset
    width/height= dimensions of the figure

    Returns:
    fig, ax
    Matplotlib figure and axes objects
    
    '''
    sns.set_style("darkgrid")
    fig, ax =plt.subplots(3,4, figsize = (width, height))
    plt.subplots_adjust(hspace = 0.25)
    max_pred_train = df_train['pred'].max()
    max_pred_val = df_val['pred'].max()
    max_pred = max([max_pred_train, max_pred_val]) + 1
    max_os = df_train['os'].max() + 1

    if cell_type:
        mask = df_all['raw_img_dir'] == cell_type
        ax1 = sns.histplot(data = df_all.loc[mask], x = 'os', ax=ax[0, 0], discrete = True, binrange = (0, max_os), kde=True, color = '#2A7FAF')
        ax4 = sns.histplot(data = df_all.loc[mask], x = 'os', ax=ax[0, 1], discrete = True, binrange = (0, max_os), kde=True, color = '#2A7FAF')
    else:
        ax1 = sns.histplot(data = df_all, x = 'os', ax=ax[0, 0], discrete = True, binrange = (0, max_os), kde=True, color = '#2A7FAF')
        ax4 = sns.histplot(data = df_all, x = 'os', ax=ax[0, 1], discrete = True, binrange = (0, max_os), kde=True, color = '#2A7FAF')

    ax2 = sns.histplot(data = df_train, x = 'os', ax=ax[1, 0], discrete = True, binrange = (0, max_os), kde=True, color = '#0E3449')
    ax3 = sns.histplot(data = df_val, x = 'os', ax=ax[2, 0], discrete = True, binrange = (0, max_os), kde=True, color = '#015955')

    
    ax5 = sns.histplot(data = df_train, x = 'pred', ax=ax[1, 1], discrete = True, binrange = (0, max_pred), kde=True, color = '#0E3449')
    ax6 = sns.histplot(data = df_val, x = 'pred', ax=ax[2, 1], discrete = True, binrange = (0, max_pred), kde=True, color = '#015955')

    ax7 = sns.boxplot(data = df_train, x = 'true', y = 'pred', ax = ax[1, 2], palette = 'viridis')
    ax8 = sns.boxplot(data = df_val, x = 'true', y = 'pred', ax = ax[2, 2], palette = 'rocket')

    ax9 = sns.boxplot(data = df_train, x = 'true', y = 'abs_error', ax = ax[1, 3], palette = 'viridis')
    ax10 = sns.boxplot(data = df_val, x = 'true', y = 'abs_error', ax = ax[2, 3], palette = 'rocket')

    if cell_type:
        cell_type = cell_type
    else:
        cell_type = 'all cell types'

    ax1.title.set_text(f'Histogram and kde plot of {cell_type} data')
    ax2.title.set_text(f'Histogram and kde plot of {cell_type} train generator')
    ax3.title.set_text(f'Histogram and kde plot of {cell_type} val generator')
    ax4.title.set_text(f'Histogram and kde plot of {cell_type} true labels')
    ax5.title.set_text(f'Histogram and kde plot of {cell_type} train img prediction')
    ax6.title.set_text(f'Histogram and kde plot of {cell_type} val img prediction')
    ax7.title.set_text(f'Boxplot of true label vs predicted label')
    ax8.title.set_text(f'Boxplot of true label vs predicted label')
    ax9.title.set_text(f'Boxplot of true label vs abs error of predicted label')
    ax10.title.set_text(f'Boxplot of true label vs abs error of predicted label')

    ax7.tick_params(labelrotation=70)
    ax7.set(ylim = (0, max_pred))
    ax8.tick_params(labelrotation=70)
    ax8.set(ylim = (0, max_pred))
    ax9.tick_params(labelrotation=70)
    ax9.set(ylim = (0, max_pred))
    ax10.tick_params(labelrotation=70)
    ax10.set(ylim = (0, max_pred))

    return fig, ax

def plot_summary_stats(train_dfs, val_dfs, row_names, width = 50, height = 30):

    '''
    Plots the summary statistics of multiple dataframes (at least 2) generated by the <generate_predictions> function and returns a figure object

    Arguments:
    train_dfs: list, a list of the dataframes generated by <generate_predictions> on the iterations of the train image generator you want to plot
    val_dfs: list, a list of the dataframes generated by <generate_predictions> on the iterations of the validation image generator you want to plot
    row_names: list, the names you want to give to the rows of the subplots.
    !!! len(train_dfs) == len(val_dfs) == len(row_names)
    width/height: the dimension of the figure object
    df_train: the dataframe generated by <generate_predictions> on the iterations of the train image generator
    df_val: the dataframe generated by <generate_predictions> on the iterations of the val image generator
    cell_type: if provided should be one of the cell_types under the <raw_img_dir> of the initial dataset
    width/height= dimensions of the figure

    Returns:
    fig, ax
    Matplotlib figure and axes objects
    '''

    #verify dataframe sizes and retrieve max prediction value and nb of rows to plot
    nb_rows = len(train_dfs)
    max_pred = []

    for tr_df in train_dfs:
        max_pred.append(tr_df['pred'].max())
        for v_df in val_dfs:
            assert tr_df.shape[1] == v_df.shape[1] 
            max_pred.append(v_df['pred'].max())

    max_pred = max(max_pred) + 1
    max_os = train_dfs[0]['os'].max() + 1
    if max_pred >= 100:
        max_pred = int(max_os + 0.5 * max_os)

    assert nb_rows == len(val_dfs)
    assert nb_rows == len(row_names)



    sns.set_style("darkgrid") #set style of the graphs
    fig, ax =plt.subplots(nrows = nb_rows, ncols = 6, figsize = (width, height)) #create a figure object with a len(df_list) rows by 6 columns subplot grid

    cols = ['Target labels: train (dark) and val (lite) sets', \
    'Predicted labels: train (dark) and val (light) sets', \
    'Predictions vs true labels (train set)', \
    'Absolute error prediction vs true label (train set)', \
    'Predictions vs true labels (validation set)', \
    'Absolute error prediction vs true label (validation set)'
    ]

    if nb_rows > 1:
        for axe, col in zip(ax[0], cols):
            axe.set_title(col, fontweight = 'bold', size = 15)
    else:
        for axe, col_name in zip(ax, cols):
            axe.set_title(col_name, fontweight = 'bold', size = 15)


# Plot the histplots of the labels found in the train data from 30 iterations of the train generator on the first column
    if nb_rows > 1:
        for row, df in enumerate(train_dfs):
            sns.histplot(data = df, x = 'os', ax=ax[row, 0], discrete = True, binrange = (0, max_os), kde=True, color = '#0E3449', alpha = 0.5)
            sns.histplot(data = df, x = 'pred', ax=ax[row, 1], discrete = True, binrange = (0, max_pred), kde=True, color = '#0E3449', alpha = 0.5)
            sns.boxplot(data = df, x = 'true', y = 'pred', ax = ax[row, 2], palette = 'viridis')
            ax[row, 2].set(ylim=(0, max_pred))
            sns.boxplot(data = df, x = 'os', y = 'abs_error', ax=ax[row, 3], palette = 'viridis')
            ax[row, 3].set(ylim=(0, max_pred))

        for row, df in enumerate(val_dfs):
            sns.histplot(data = df, x = 'os', ax=ax[row, 0], discrete = True, binrange = (0, max_os), kde=True, color = '#23fdf0')
            sns.histplot(data = df, x = 'pred', ax=ax[row, 1], discrete = True, binrange = (0, max_pred), kde=True, color = '#23fdf0')
            sns.boxplot(data = df, x = 'true', y = 'pred', ax = ax[row, 4], palette = 'rocket')
            ax[row, 4].set(ylim=(0, max_pred))
            sns.boxplot(data = df, x = 'os', y = 'abs_error', ax=ax[row, 5], palette = 'rocket')
            ax[row, 5].set(ylim=(0, max_pred))

        for axe, row in zip(ax[:,0], row_names):
            axe.set_ylabel(row, fontsize = 15)

    else:
        sns.histplot(data = train_dfs[0], x = 'os', ax=ax[0], discrete = True, binrange = (0, max_os), kde=True, color = '#0E3449', alpha = 0.5)
        sns.histplot(data = train_dfs[0], x = 'pred', ax=ax[1], discrete = True, binrange = (0, max_pred), kde=True, color = '#0E3449', alpha = 0.5)
        sns.boxplot(data = train_dfs[0], x = 'true', y = 'pred', ax = ax[2], palette = 'viridis')
        ax[2].set(ylim=(0, max_pred))
        sns.boxplot(data = train_dfs[0], x = 'os', y = 'abs_error', ax=ax[3], palette = 'viridis')
        ax[3].set(ylim=(0, max_pred))

        sns.histplot(data = val_dfs[0], x = 'os', ax=ax[0], discrete = True, binrange = (0, max_os), kde=True, color = '#23fdf0')
        sns.histplot(data = val_dfs[0], x = 'pred', ax=ax[1], discrete = True, binrange = (0, max_pred), kde=True, color = '#23fdf0')
        sns.boxplot(data = val_dfs[0], x = 'true', y = 'pred', ax = ax[4], palette = 'rocket')
        ax[4].set(ylim=(0, max_pred))
        sns.boxplot(data = val_dfs[0], x = 'os', y = 'abs_error', ax=ax[5], palette = 'rocket')
        ax[5].set(ylim=(0, max_pred))

        for axe, row in zip(ax, row_names):
            axe.set_ylabel(row, fontsize = 15)

    return fig, ax